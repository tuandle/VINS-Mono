%YAML:1.0

#common parameters
imu_topic: "/imu0"
image_topic: "/cam1/image_raw"
output_path: "/home/tuan/monocam_ws/src/VINS-Mono/output"

#camera calibration 
model_type: MEI
camera_name: camera
image_width: 640
image_height: 480
mirror_parameters:
   xi: 2.9364486974776973
distortion_parameters:
   k1: 0.6404639141825778
   k2: 6.1785377532595485
   p1: -0.0040462169943965625
   p2: 0.0002599402098400286
projection_parameters:
   gamma1: 1084.57909045 #206.76398367886839 #eta: 5.2454932970075046
   gamma2: 1080.93388146 #206.06906162158003
   u0: 311.94203730635763
   v0: 245.9240905047199

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.99999882,  0.00009417,  0.00153626,
          -0.00008873, 0.99999372, -0.00354382, 
          -0.00153659, 0.00354368,  0.99999254]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.00550212, -0.00023766, 0.06685305]

#feature traker paprameters
max_cnt: 100            # max feature number in feature tracking
min_dist: 20            # min distance between two features 
freq: 20                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 1              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 000.027052931930236323         # accelerometer measurement noise standard deviation. #0.2
gyr_n: 1.1186830841306218e-03         # gyroscope measurement noise standard deviation.     #0.05
acc_w: 1.3054568211204843e-03         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 8.997530210630026e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.75770672       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/tuan/vision_ws/src/VINS-Mono/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.003 #0.006575 #0.006901           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ